#---------------------------------------------------------------------------#
# \file CMakeLists.txt
#
# Copyright (c) 2019 Oak Ridge National Laboratory, UT-Battelle, LLC.
# Distributed under an MIT open source license: see LICENSE for details.
#---------------------------------------------------------------------------#

cmake_minimum_required(VERSION 3.8)
project(Flibcpp VERSION 0.1.0 LANGUAGES CXX Fortran)

#---------------------------------------------------------------------------#
# OPTIONS
#---------------------------------------------------------------------------#

if (NOT DEFINED(FLIBCPP_DEV))
  set(FLIBCPP_DEV OFF CACHE STRING
    "Default to using development-centered options")
endif()

if (NOT DEFINED(CMAKER_BUILD_SHARED))
  set(FLIBCPP_DEV OFF CACHE STRING
    "Default to using development-centered options")
endif()

if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  if (FLIBCPP_DEV)
    set(_CMAKE_BUILD_TYPE "Debug")
  else ()
    set(_CMAKE_BUILD_TYPE "RelWithDebInfo")
  endif()
  message(STATUS "No build type selected, default to ${_CMAKE_BUILD_TYPE}")
  set(CMAKE_BUILD_TYPE "${_CMAKE_BUILD_TYPE}" CACHE STRING "Build type" FORCE)
endif()

option(BUILD_SHARED_LIBS "Build shared libraries" ON)

#---------------------------------------------------------------------------#
# SWIG setup
#---------------------------------------------------------------------------#

option(FLIBCPP_USE_SWIG "Enable SWIG generation" ${FLIBCPP_DEV})
if (FLIBCPP_USE_SWIG)
  find_package(SWIG)
endif()

if (FLIBCPP_USE_SWIG AND SWIG_FOUND)
  # SWIG is requested and available; make sure it's the Fortran fork.
  list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
  include(CheckSWIGFortran)
  if (CMAKE_VERSION VERSION_LESS 3.20)
    # TODO: This is until Fortran support gets added to the upstream cmake script
    include(UseSWIGFortran)
  else()
    cmake_policy(SET CMP0078 "NEW")
    cmake_policy(SET CMP0086 "NEW")
    include(UseSWIG)
  endif()
else()
  set(FLIBCPP_USE_SWIG FALSE)
endif()

#---------------------------------------------------------------------------#
# VERSIONING
#---------------------------------------------------------------------------#


# Get a possible Git version generated using git-archive (see the .gitattributes
# file)
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/cmake/git-version.txt"
     FLIBCPP_VERSION_STRING)

if (NOT FLIBCPP_VERSION_STRING MATCHES "\\$Format:")
  # First line are decorators, second is hash
  list(GET FLIBCPP_VERSION_STRING 0 _tag)
  string(REGEX REPLACE ".*, *(tag: *)?" "" _tag "${_tag}")
  list(GET FLIBCPP_VERSION_STRING 1 _hash)
  string(REGEX REPLACE " +" "" _hash "${_hash}")
  set(FLIBCPP_VERSION_STRING "${_tag}-g${_hash}")
else()
  find_package(Git)
  if (Git_FOUND)
    execute_process(
      COMMAND "${GIT_EXECUTABLE}" "describe"
      ERROR_QUIET
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      OUTPUT_VARIABLE FLIBCPP_VERSION_STRING
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
  else()
    set(FLIBCPP_VERSION_STRING "${Flibcpp_VERSION}")
  endif()
endif()


set(FLIBCPP_VERSION_CPP "${CMAKE_CURRENT_BINARY_DIR}/flibcpp_version.cpp")
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/flibcpp_version.cpp.in"
  "${FLIBCPP_VERSION_CPP}" @ONLY)

#---------------------------------------------------------------------------#
# LIBRARY
#---------------------------------------------------------------------------#

include(GNUInstallDirs)

set(CMAKE_Fortran_MODULE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/module")
set(FLIBCPP_GENERATE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/generated")
set(FLIBCPP_INSTALL_CONFIGDIR "${CMAKE_INSTALL_LIBDIR}/cmake/Flibcpp")
set(FLIBCPP_INSTALL_MODULEDIR "${CMAKE_INSTALL_INCLUDEDIR}")
set(FLIBCPP_NAMESPACE Flibcpp::)

set(FLIBCPP_LIBRARIES)

function(swig_fortran_add_module name)
  # We're using C++
  set_property(SOURCE src/${name}.i PROPERTY CPLUSPLUS ON)
  # We need to include the source directory
  set_property(SOURCE src/${name}.i PROPERTY USE_TARGET_INCLUDE_DIRECTORIES ON)

  if (FLIBCPP_USE_SWIG)
    # SWIG is available; actually generate the library dynamically.
    # Create the library
    swig_add_library(${name}
      LANGUAGE Fortran
      TYPE USE_BUILD_SHARED_LIBS
      OUTPUT_DIR "${FLIBCPP_GENERATE_DIR}"
      SOURCES src/${name}.i ${ARGN}
    )
  else()
    # SWIG is *not* being used: compile the code committed in the repository,
    # generated by the developer with SWIG.
    add_library(${name}
      "${FLIBCPP_GENERATE_DIR}/${name}.f90"
      "${FLIBCPP_GENERATE_DIR}/${name}FORTRAN_wrap.cxx"
      ${ARGN}
    )
  endif()

  # Enable C++11
  target_compile_features(${name}
    PRIVATE
      cxx_std_11
  )

  target_include_directories(${name}
    PRIVATE
      # Internal C++ headers
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    PUBLIC
      # Fortran modules
      $<BUILD_INTERFACE:${CMAKE_Fortran_MODULE_DIRECTORY}>
      $<INSTALL_INTERFACE:${FLIBCPP_INSTALL_MODULEDIR}>
  )

  # Set up installation
  install(TARGETS ${name}
    EXPORT Flibcpp-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )
  # Add to list of targets to export
  set(FLIBCPP_LIBRARIES ${FLIBCPP_LIBRARIES} ${FLIBCPP_NAMESPACE}${name}
      PARENT_SCOPE
  )
endfunction()

# Four SWIG libraries
swig_fortran_add_module(flc "${FLIBCPP_VERSION_CPP}")
swig_fortran_add_module(flc_random)
target_link_libraries(flc_random flc)
swig_fortran_add_module(flc_algorithm)
target_link_libraries(flc_algorithm flc_random flc)
swig_fortran_add_module(flc_vector)
target_link_libraries(flc_vector flc)

#---------------------------------------------------------------------------#
# INSTALLATION
#---------------------------------------------------------------------------#

# Install module files
install(DIRECTORY "${CMAKE_Fortran_MODULE_DIRECTORY}/"
  DESTINATION "${FLIBCPP_INSTALL_MODULEDIR}"
)

install(EXPORT Flibcpp-targets
  FILE FlibcppTargets.cmake
  NAMESPACE ${FLIBCPP_NAMESPACE}
  DESTINATION ${FLIBCPP_INSTALL_CONFIGDIR}
)

# Create a ConfigVersion.cmake file
include(CMakePackageConfigHelpers)

configure_package_config_file(
  ${CMAKE_CURRENT_LIST_DIR}/cmake/FlibcppConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfig.cmake
  INSTALL_DESTINATION ${FLIBCPP_INSTALL_CONFIGDIR}
)

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMajorVersion
)

install(
  FILES ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfig.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfigVersion.cmake
  DESTINATION ${FLIBCPP_INSTALL_CONFIGDIR}
)

#---------------------------------------------------------------------------#
# TESTING
#---------------------------------------------------------------------------#

option(FLIBCPP_BUILD_TESTS "Build unit tests" ${FLIBCPP_DEV})
if (FLIBCPP_BUILD_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()

#---------------------------------------------------------------------------#
# EXECUTABLES
#---------------------------------------------------------------------------#

option(FLIBCPP_BUILD_EXAMPLES "Build examples" ON)
if (FLIBCPP_BUILD_EXAMPLES)
  add_subdirectory(example)
endif()

#---------------------------------------------------------------------------#
# DOCUMENTATION
#---------------------------------------------------------------------------#

option(FLIBCPP_BUILD_DOCS "Build documentation" ${FLIBCPP_DEV})
if (FLIBCPP_BUILD_DOCS)
  add_subdirectory(doc)
endif()

