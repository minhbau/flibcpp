#---------------------------------------------------------------------------#
# \file CMakeLists.txt
#
# Copyright (c) 2019 Oak Ridge National Laboratory, UT-Battelle, LLC.
# Distributed under an MIT open source license: see LICENSE for details.
#---------------------------------------------------------------------------#

cmake_minimum_required(VERSION 3.8)
project(flibcpp VERSION 0.1.0 LANGUAGES CXX Fortran)

#---------------------------------------------------------------------------#
# SWIG setup
#---------------------------------------------------------------------------#

option(USE_SWIG "Enable SWIG generation" ON)
if (USE_SWIG)
  find_package(SWIG)
endif()

if (USE_SWIG AND SWIG_FOUND)
  # SWIG is requested and available; make sure it's the Fortran fork.
  list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
  include(CheckSWIGFortran)
  if (CMAKE_VERSION VERSION_LESS 3.20)
    # TODO: This is until Fortran support gets added to the upstream cmake script
    include(UseSWIGFortran)
  else()
    cmake_policy(SET CMP0078 "NEW")
    cmake_policy(SET CMP0086 "NEW")
    include(UseSWIG)
  endif()
else()
  set(USE_SWIG FALSE)
endif()

#---------------------------------------------------------------------------#
# LIBRARY
#---------------------------------------------------------------------------#
include(GNUInstallDirs)
set(GENERATE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/generated)

function(swig_fortran_add_module name)
  # We're using C++
  set_property(SOURCE src/${name}.i PROPERTY CPLUSPLUS ON)
  # We need to include the source directory
  set_property(SOURCE src/${name}.i
    PROPERTY USE_TARGET_INCLUDE_DIRECTORIES ON)

  if (USE_SWIG)
    # SWIG is available; actually generate the library dynamically.
    # Create the library
    swig_add_library(${name}
      LANGUAGE Fortran
      TYPE USE_BUILD_SHARED_LIBS
      OUTPUT_DIR "${GENERATE_DIR}"
      SOURCES src/${name}.i ${ARGN})
  else()
    # SWIG is *not* being used: compile the code committed in the repository,
    # generated by the developer with SWIG.
    add_library(${name}
      "${GENERATE_DIR}/${name}.f90"
      "${GENERATE_DIR}/${name}FORTRAN_wrap.cxx"
      ${ARGN})
  endif()

  # Enable C++11
  target_compile_features(${name} PRIVATE cxx_std_11)

  # Use correct include directories for C++
  target_include_directories(${name}
      PUBLIC
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
          $<INSTALL_INTERFACE:include>
      PRIVATE
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
  )

  # Use correct Fortran module directories
  target_include_directories(${name}
      PUBLIC
          $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
          $<INSTALL_INTERFACE:modules>
  )

  # Set up installation
  install(TARGETS ${name}
      EXPORT flibcpp-targets
      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )
endfunction()

# Four SWIG libraries
swig_fortran_add_module(flc)
swig_fortran_add_module(flc_random)
target_link_libraries(flc_random flc)
swig_fortran_add_module(flc_algorithm)
target_link_libraries(flc_algorithm flc_random flc)

#---------------------------------------------------------------------------#
# INSTALLATION
#---------------------------------------------------------------------------#
set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/flibcpp)

install(EXPORT flibcpp-targets
  FILE FlibcppTargets.cmake
  NAMESPACE Flibcpp::
  DESTINATION ${INSTALL_CONFIGDIR}
)

# Create a ConfigVersion.cmake file
include(CMakePackageConfigHelpers)

configure_package_config_file(
  ${CMAKE_CURRENT_LIST_DIR}/cmake/FlibcppConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfig.cmake
  INSTALL_DESTINATION ${INSTALL_CONFIGDIR}
  )

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMajorVersion
  )

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/FlibcppConfigVersion.cmake
  DESTINATION ${INSTALL_CONFIGDIR}
  )

#---------------------------------------------------------------------------#
# TESTING
#---------------------------------------------------------------------------#

enable_testing()
add_subdirectory(test)

#---------------------------------------------------------------------------#
# EXECUTABLES
#---------------------------------------------------------------------------#

add_subdirectory(example)

#---------------------------------------------------------------------------#
# DOCUMENTATION
#---------------------------------------------------------------------------#

option(ENABLE_DOC "Build documentation" OFF)
if (ENABLE_DOC)
  add_subdirectory(doc)
endif()

